import{_ as t,c as s,o as i,aj as a}from"./chunks/framework.D1pnFkAx.js";const k=JSON.parse('{"title":"State & Responsive Prefixes","description":"","frontmatter":{},"headers":[],"relativePath":"styling/state-and-responsive-prefixes.md","filePath":"styling/state-and-responsive-prefixes.md"}'),d={name:"styling/state-and-responsive-prefixes.md"};function r(n,e,l,h,o,p){return i(),s("div",null,e[0]||(e[0]=[a('<h1 id="state-responsive-prefixes" tabindex="-1">State &amp; Responsive Prefixes <a class="header-anchor" href="#state-responsive-prefixes" aria-label="Permalink to “State &amp; Responsive Prefixes”">​</a></h1><p>IconForge allows you to apply styles conditionally using state and responsive prefixes. This is a powerful feature that lets you create dynamic and responsive designs.</p><h3 id="state-prefixes" tabindex="-1">State Prefixes <a class="header-anchor" href="#state-prefixes" aria-label="Permalink to “State Prefixes”">​</a></h3><p>State prefixes are used to apply styles based on the state of an element, such as when it is hovered over or focused.</p><table tabindex="0"><thead><tr><th>Prefix</th><th>Description</th></tr></thead><tbody><tr><td><code>hover:</code></td><td>Applied when the element is hovered over.</td></tr><tr><td><code>focus:</code></td><td>Applied when the element is focused.</td></tr><tr><td><code>active:</code></td><td>Applied when the element is active.</td></tr><tr><td><code>disabled:</code></td><td>Applied when the element is disabled.</td></tr><tr><td><code>dark:</code></td><td>Applied when the <code>dark</code> class is present on a parent element.</td></tr></tbody></table><p><strong>Example:</strong></p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">i</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;if-heart is-color-red-5 hover:is-color-red-7&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="responsive-prefixes" tabindex="-1">Responsive Prefixes <a class="header-anchor" href="#responsive-prefixes" aria-label="Permalink to “Responsive Prefixes”">​</a></h3><p>Responsive prefixes are used to apply styles at different screen sizes.</p><table tabindex="0"><thead><tr><th>Prefix</th><th>Media Query</th></tr></thead><tbody><tr><td><code>xs:</code></td><td><code>@media (min-width: 420px)</code></td></tr><tr><td><code>sm:</code></td><td><code>@media (min-width: 640px)</code></td></tr><tr><td><code>md:</code></td><td><code>@media (min-width: 768px)</code></td></tr><tr><td><code>lg:</code></td><td><code>@media (min-width: 1024px)</code></td></tr><tr><td><code>xl:</code></td><td><code>@media (min-width: 1280px)</code></td></tr></tbody></table><p><strong>Example:</strong></p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">i</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;if-heart is-size-2xl md:is-size-3xl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div>',12)]))}const g=t(d,[["render",r]]);export{k as __pageData,g as default};
